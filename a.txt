//playfair
import java.util.Scanner;
public class play
{
     public static void main(String []args)
	 {
		char []alpha={'A','B','C','D','E','F','G','H','I','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
		Scanner scan=new Scanner(System.in);
		System.out.println("Enter message: ");
		String text=scan.next();
		String text1=text.toUpperCase();
		System.out.println("Enter key: ");
		String key=scan.next();
		
		String keys=key.toUpperCase();
		String key1=removeDuplicateElements(keys);
		String key2=createKeyArray(key1,alpha);
		char array[][]=createKeyMatrix(key2);
		printKeyMatrix(array);
		
		String prepareText=preparePlaintext(text1);
		String cipherText=encryption(prepareText,array);
		System.out.println("Enter message: "+prepareText);
		System.out.println("Encrypt message: "+cipherText);
		String plainText=decryption(cipherText,array);
		System.out.println("Decrypt message: "+plainText);
        String plainTextNew=removeFiilerElemets(plainText);
		System.out.println("Decrypt message: "+plainTextNew);
		
	 }
	 //**********************************************
	 
	 static String removeDuplicateElements(String key)
	 {
		 if(key!="" && key!=null)
		 {
			 char array[]=new char[key.length()];
			 for(int i=0;i<array.length;i++)
			 {
				 if(isNotContains(array,key.charAt(i)))
					 array[i]=key.charAt(i);
			 }
			 return removeEmptyElements(array);
		 }
		 return "";
	 }
	 
	 //*********************************************
	 static boolean isNotContains(char []array,char c)
	 {
		for(int i=0;i<array.length;i++)
		{
				 if(array[i]==c)
					return false; 
		}
		return true;
	 }
	 
	 //**********************************************
	 static String removeEmptyElements(char []array)
	 {
		 String text="";
		 for(int i=0;i<array.length;i++)
		 {
			 if(array[i]!='\u0000')
				 text+=array[i];
		 }
		 return text;
	 }
	 //**************************************************
	 static String createKeyArray(String key,char []alpha)
	 {
		 char array[]=new char[25];
		 for(int i=0;i<key.length();i++)
		 {
			 array[i]=key.charAt(i);
		 }
		 int count=key.length();
		 
		 for(int j=0;j<array.length;j++)
		 {
			if(isNotContains(array,alpha[j]))
			{
			    array[count++]=alpha[j];
			}
		 }
		return removeEmptyElements(array);
	 }
    //*********************************************
	static char[][] createKeyMatrix(String key)
	{
		int k=0;
		char [][]array=new char[5][5];
		for(int i=0;i<5;i++)
		{
			for(int j=0;j<5;j++)
			{
				array[i][j]=key.charAt(k++);
			}
		}
		return array;
	}
	//*********************************************
	static void printKeyMatrix(char [][]array)
	{
		for(int i=0;i<5;i++)
		{
			for(int j=0;j<5;j++)
			{
				System.out.print(array[i][j]+" ");
			}
			System.out.println();
		}
	}
	static int[] findpositions(char c,char [][]matrix)
	{
		int []postion=new int[2];
		for(int i=0;i<5;i++)
		{
			for(int j=0;j<5;j++)
			{
				if(matrix[i][j]==c)
				{
					postion[0]=i;
					postion[1]=j;
					break;
				}
			}		
		}
		return postion;
	}
	//********************************************
	static String preparePlaintext(String plaintext)
	{
		String newPlain="";
		for(int i=0;i<plaintext.length();i++)
		{
			char currentChar=plaintext.charAt(i);
			if(currentChar=='J')
			{
				currentChar='I';
			}
			
			if(i<plaintext.length()-1)
			{
				char newChar=plaintext.charAt(i+1);
				if(currentChar==newChar)
				{
					newPlain+=currentChar+"X";
				}
				else
				{
					newPlain+=currentChar;
				}
			}
			else
			{
				newPlain+=currentChar;
			}
		}
		if(newPlain.length()%2!=0)
		{
			newPlain+="X";
		}
		return newPlain;
	}
	//********************************************************
	static String encryption(String plaintext,char [][]matrix)
	{
		String cipherMsg="";
		for(int i=0;i<plaintext.length();i+=2)
		{
			char char1=plaintext.charAt(i);
			char char2=plaintext.charAt(i+1);
			
			int postion1[]=findpositions(char1,matrix);
			int postion2[]=findpositions(char2,matrix);
			
			if(postion1[0]==postion2[0])
			{
				cipherMsg+=matrix[postion1[0]][(postion1[1]+1)%5];
				cipherMsg+=matrix[postion2[0]][(postion2[1]+1)%5];
			}
			else if(postion1[1]==postion2[1])
			{
				cipherMsg+=matrix[(postion1[0]+1)%5][postion1[1]];
				cipherMsg+=matrix[(postion2[0]+1)%5][postion2[1]];
			}
			else
			{
				cipherMsg+=matrix[postion1[0]][postion2[1]];
				cipherMsg+=matrix[postion2[0]][postion1[1]];
			}
		}
		return cipherMsg;
	}
	//**************************************************
	static String decryption(String ciphertext,char [][]matrix)
	{
		String plainMsg="";
		for(int i=0;i<ciphertext.length();i+=2)
		{
			char char1=ciphertext.charAt(i);
			char char2=ciphertext.charAt(i+1);
			
			int postion1[]=findpositions(char1,matrix);
			int postion2[]=findpositions(char2,matrix);
			
			if(postion1[0]==postion2[0])
			{
				plainMsg+=matrix[postion1[0]][(postion1[1]-1+5)%5];
				plainMsg+=matrix[postion2[0]][(postion2[1]-1+5)%5];
			}
			else if(postion1[1]==postion2[1])
			{
				plainMsg+=matrix[(postion1[0]-1+5)%5][postion1[1]];
				plainMsg+=matrix[(postion2[0]-1+5)%5][postion2[1]];
			}
			else
			{
				plainMsg+=matrix[postion1[0]][postion2[1]];
				plainMsg+=matrix[postion2[0]][postion1[1]];
			}
		}
		return plainMsg;
	}
	//***************************************************
	static String removeFiilerElemets(String text)
	 {
		 String newText="";
		 for(int i=0;i<text.length();i++)
		 {
			 if(text.charAt(i)!='X')
				 newText+=text.charAt(i);
		 }
		 return newText;
	 }
}
==============================================================================================================================================
//Ceaser Cipher
import java.util.*;

public class CeaserCipher{
	
	char alp[] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
	
	public void encrypt(String plaintext,int key){
		String ciphertext ="";
		plaintext = plaintext.toUpperCase();
	
	
		for (int i=0;i<plaintext.length();i++){
			for (int j=0;j<alp.length;j++){
				if (plaintext.charAt(i)==alp[j]){
					ciphertext = ciphertext+(alp[(j+key)%26]);
				}
			}	
		}
	
		System.out.println("Ciphertext: "+ciphertext);
	
	
	}
	
	public void decrypt(String ciphertext,int key){
		String plaintext ="";
		ciphertext = ciphertext.toUpperCase();
	
		int index=0;
		for (int i=0;i<ciphertext.length();i++){
			for (int j=0;j<alp.length;j++){
				if (ciphertext.charAt(i)==alp[j]){
					index = j-key;
					if(index<0){
						index = index+26;
					}
					plaintext = plaintext+alp[index];
				}
			}	
		}
	
		System.out.println("Plaintext: "+plaintext);
	}
	
	public static void main (String [] args){
		Scanner scn = new Scanner (System.in);
		CeaserCipher obj = new CeaserCipher();
		String msg ="";
		int key=0;
		
		System.out.println("Please choose an option: ");
		System.out.println("1. Encryption");
		System.out.println("2. Decryption ");
		
		int opt = scn.nextInt();
		if (opt ==1){
			System.out.println("Please enter plaintext: ");
			msg = scn.next();
			System.out.println("Please enter the key: ");
			key = scn.nextInt();
			obj.encrypt(msg,key);
		}else if (opt == 2){
			System.out.println("Please enter ciphertext: ");
			msg = scn.next();
			System.out.println("Please enter the key: ");
			key = scn.nextInt();
			obj.decrypt(msg,key);
		}else{
			System.out.println("Inavlid Option");
		}
	}
}

==========================================================================================================
//monoalphabetic
import java.util.*;

public class MonoAlphabeticCipher{
	
	char alp[] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
	char key[] = {'B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','A'};
	
	public void encrypt(String plaintext){
		String ciphertext ="";
		plaintext = plaintext.toUpperCase();
	
	
		for (int i=0;i<plaintext.length();i++){
			for (int j=0;j<alp.length;j++){
				if (plaintext.charAt(i)==alp[j]){
					ciphertext = ciphertext+(key[j]);
				}
			}	
		}
	
		System.out.println("Ciphertext: "+ciphertext);
	
	
	}
	
	public void decrypt(String ciphertext){
		String plaintext ="";
		ciphertext = ciphertext.toUpperCase();
	
		
		for (int i=0;i<ciphertext.length();i++){
			for (int j=0;j<key.length;j++){
				if (ciphertext.charAt(i)==key[j]){
					
					plaintext = plaintext+alp[j];
				}
			}	
		}
	
		System.out.println("Plaintext: "+plaintext);
	}
	
	public static void main (String [] args){
		Scanner scn = new Scanner (System.in);
		MonoAlphabeticCipher obj = new MonoAlphabeticCipher();
		String msg ="";
		int key=0;
		
		System.out.println("Please choose an option: ");
		System.out.println("1. Encryption");
		System.out.println("2. Decryption ");
		
		int opt = scn.nextInt();
		if (opt ==1){
			System.out.println("Please enter plaintext: ");
			msg = scn.next();
			obj.encrypt(msg);
		}else if (opt == 2){
			System.out.println("Please enter ciphertext: ");
			msg = scn.next();
			obj.decrypt(msg);
		}else{
			System.out.println("Inavlid Option");
		}
	}
}

====================================================================================================
//polyalphabetic
import java.util.*;

public class PolyalphabeticCipher{
	char alpArr[] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};

	public String prepareKey(String key,String msg){
		key = key.toUpperCase();
		msg = msg.toUpperCase();
		
		
			int index =0;
			for(int i=0;i<msg.length();i++){
				
				if(key.length()== msg.length()){
					break;
				}else{
					if (index==key.length()){
						index=0;
					}
				
					key = key+key.charAt(index);
					index++;
				}
			}
			return key;
		
	}
	
	public void encrypt(String plaintext,String key){
		int p=0;
		int k=0;
		int index =0;
		String ciphertext="";
		plaintext = plaintext.toUpperCase();
		
		for(int i=0;i<plaintext.length();i++){
			for(int j=0;j<alpArr.length;j++){

				if(key.charAt(i)==alpArr[j]){
					k=j;
				}
				
				if(plaintext.charAt(i)==alpArr[j]){
					p=j;
				}
				
			}

			index = (p+k)%26;
			ciphertext = ciphertext+alpArr[index];
		}
		
		System.out.println("Ciphertext: "+ciphertext);
	}
	
	public void decrypt(String ciphertext,String key){
		int c=0;
		int k=0;
		int index =0;
		String plaintext="";
		ciphertext = ciphertext.toUpperCase();
		
		for(int i=0;i<ciphertext.length();i++){
			for(int j=0;j<alpArr.length;j++){

				if(key.charAt(i)==alpArr[j]){
					k=j;
				}
				
				if(ciphertext.charAt(i)==alpArr[j]){
					c=j;
				}
				
			}

			index = c-k;
			if(index<0){
				index = index+26;
			}
			plaintext = plaintext+alpArr[index];
		}
		
		System.out.println("Plaintext: "+plaintext);
	}
	
	public static void main (String []args){
		Scanner scn = new Scanner (System.in);
		PolyalphabeticCipher obj = new PolyalphabeticCipher();
		String key="";
		String msg="";
		
		System.out.println("Please choose an option: ");
		System.out.println("1. Encryption");
		System.out.println("2. Decryption ");
		
		int opt = scn.nextInt();
		if (opt ==1){
			System.out.println("Please enter plaintext: ");
			msg = scn.next();
			System.out.println("Please enter the key: ");
			key = scn.next();
			key=obj.prepareKey(key,msg);
			obj.encrypt(msg,key);
		}else if (opt == 2){
			System.out.println("Please enter ciphertext: ");
			msg = scn.next();
			System.out.println("Please enter the key: ");
			key = scn.next();
			key = obj.prepareKey(key,msg);
			obj.decrypt(msg,key);
		}else{
			System.out.println("Inavlid Option");
		}
	}
}

====================================================================================================
//columnar
import java.util.*;

public class ColumnarTransposition {
	
	public void encrypt(String plaintext,String key){
		
		int index[] = new int[key.length()];
		String ciphertext = "";
		
		plaintext = plaintext.toUpperCase();
		key = key.toUpperCase();
		int col=key.length();

		if(plaintext.length()%col !=0){
			for(int i=0;i<plaintext.length()%col;i++){
				plaintext = plaintext+"_";
			}
		}
		
		int row = plaintext.length()/col;
		char mat[][] = new char[row][col];
		
		int count=0;
		for (int i=0;i<row;i++){
			for(int j=0;j<col;j++){
				mat[i][j] = plaintext.charAt(count);
				count++;
			}
		}
		
		
		
		char temp[] = key.toCharArray();
		Arrays.sort(temp);
		
		
		for(int i=0;i<temp.length;i++){
			for(int j=0;j<key.length();j++){
				if(temp[i]==key.charAt(j)){
					index[i]=j;
				}
			}
		}
		
		
		for(int i=0;i<col;i++){
			for(int j=0;j<row;j++){
				
				ciphertext = ciphertext + mat[j][index[i]];
			}
		}
		
		System.out.println("Ciphertext: "+ciphertext);
		
	}
	
	public void decrypt(String ciphertext,String key){
		int index[] = new int[key.length()];
		String plaintext = "";
		
		ciphertext = ciphertext.toUpperCase();
		key = key.toUpperCase();
		int col=key.length();
		int row= ciphertext.length()/col;
		
		char mat[][] = new char[row][col];
		
		char temp[] = key.toCharArray();
		Arrays.sort(temp);
		
		
		for(int i=0;i<temp.length;i++){
			for(int j=0;j<key.length();j++){
				if(temp[i]==key.charAt(j)){
					index[i]=j;
				}
			}
		}
		
		int count=0;
		for (int i=0;i<col;i++){
			for(int j=0;j<row;j++){
				mat[j][index[i]] = ciphertext.charAt(count);
				count++;
			}
		}
		
		for (int i=0;i<row;i++){
			for(int j=0;j<col;j++){
				plaintext = plaintext+mat[i][j];
			}
		}
		
		System.out.println("Plaintext: "+plaintext);
		
	}
	
	public static void main (String []args){
		Scanner scn = new Scanner(System.in);
		ColumnarTransposition obj = new ColumnarTransposition();
		String key="";
		String msg="";
		
		System.out.println("Please choose an option: ");
		System.out.println("1. Encryption");
		System.out.println("2. Decryption ");
		
		int opt = scn.nextInt();
		if (opt ==1){
			System.out.println("Please enter plaintext: ");
			msg = scn.next();
			System.out.println("Please enter the key: ");
			key = scn.next();
			
			obj.encrypt(msg,key);
		}else if (opt == 2){
			System.out.println("Please enter ciphertext: ");
			msg = scn.next();
			System.out.println("Please enter the key: ");
			key = scn.next();
			
			obj.decrypt(msg,key);
		}else{
			System.out.println("Inavlid Option");
		}
	}

}

======================================================================================================
//otp
import java.util.*;

public class OTP{
	char alp[] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
	
	public void encrypt(String plaintext,String key){
		
		if(plaintext.length()!=key.length()){
			System.out.println("The key must be as same length as plaintext");
		}else{
			plaintext= plaintext.toUpperCase();
			key = key.toUpperCase();
			
			int p=0;
			int k=0;
			int c=0;
			String ciphertext="";
			
			for(int i=0;i<plaintext.length();i++){
				for(int j=0;j<alp.length;j++){
					if(plaintext.charAt(i)==alp[j]){
						p=j;
					}
					if(key.charAt(i)==alp[j]){
						k=j;
					}
				}
				
				c = (p+k)%26;
				ciphertext = ciphertext+alp[c];
			}
			
			System.out.println("Ciphertext: "+ciphertext);
		}
	}
	
	public void decrypt(String ciphertext,String key){
		
		if(ciphertext.length()!=key.length()){
			System.out.println("The key must be as same length as ciphertext");
		}else{
			ciphertext= ciphertext.toUpperCase();
			key = key.toUpperCase();
			
			int p=0;
			int k=0;
			int c=0;
			String plaintext="";
			
			for(int i=0;i<ciphertext.length();i++){
				for(int j=0;j<alp.length;j++){
					if(ciphertext.charAt(i)==alp[j]){
						c=j;
					}
					if(key.charAt(i)==alp[j]){
						k=j;
					}
				}
				
				p = (c-k)%26;
				if(p<0){
					p=p+26;
				}
				plaintext = plaintext+alp[p];
			}
			
			System.out.println("Plaintext: "+plaintext);
		}
	}
	
	public static void main (String []args){
		Scanner scn = new Scanner (System.in);
		OTP obj = new OTP();
		String key="";
		String msg="";
		
		System.out.println("Please choose an option: ");
		System.out.println("1. Encryption");
		System.out.println("2. Decryption ");
		
		int opt = scn.nextInt();
		if (opt ==1){
			System.out.println("Please enter plaintext: ");
			msg = scn.next();
			System.out.println("Please enter the key: ");
			key = scn.next();
			obj.encrypt(msg,key);
		}else if (opt == 2){
			System.out.println("Please enter ciphertext: ");
			msg = scn.next();
			System.out.println("Please enter the key: ");
			key = scn.next();
			obj.decrypt(msg,key);
		}else{
			System.out.println("Inavlid Option");
		}
	}
}

=====================================================================================================
//railfence

import java.util.*;

public class RailFenceCipher {
	
	public void encrypt(String plaintext,int key){
		
		char mat[][]= new char[key][plaintext.length()];
		String ciphertext="";
		plaintext = plaintext.toUpperCase();
		
		for(int i=0;i<plaintext.length();i++){
			for(int j=0;j<key;j++){
				mat[j][i]= '_';
			}
		}
		
		int index=0;
		boolean direction = true;
		for (int i=0;i<plaintext.length();i++){
			
			if(index==0){
				direction=true;
			}else if(index == key-1){
				direction=false;
			}
			mat[index][i]= plaintext.charAt(i);
			
			if(direction){
				index++;
			}else{
				index--;
			}
		}
		
		for(int i=0;i<key;i++){
			for(int j=0;j<plaintext.length();j++){
				System.out.print(mat[i][j]+",");
			}
			System.out.println("");
		}
		
		System.out.println("");
		
		for(int i=0;i<key;i++){
			for(int j=0;j<plaintext.length();j++){
				if(mat[i][j]!= '_'){
					ciphertext = ciphertext+mat[i][j];
				}
			}
		}
		
		System.out.println("Ciphertext: "+ ciphertext);
	}
	
	public void decrypt(String ciphertext,int key){
		
		char mat[][]= new char[key][ciphertext.length()];
		String plaintext="";
		ciphertext = ciphertext.toUpperCase();
		
		for(int i=0;i<ciphertext.length();i++){
			for(int j=0;j<key;j++){
				mat[j][i]= '_';
			}
		}
		
		int index=0;
		boolean direction = true;
		for (int i=0;i<ciphertext.length();i++){
			
			if(index==0){
				direction=true;
			}else if(index == key-1){
				direction=false;
			}
			mat[index][i]= '*';
			
			if(direction){
				index++;
			}else{
				index--;
			}
		}
		
		int count=0;
		for(int i=0;i<key;i++){
			for(int j=0;j<ciphertext.length();j++){
				if(mat[i][j]=='*'){
					mat[i][j]=ciphertext.charAt(count);
					count++;
				}
				
			}
		}
		
		for(int i=0;i<key;i++){
			for(int j=0;j<ciphertext.length();j++){
				System.out.print(mat[i][j]+",");
			}
			System.out.println("");
		}
		
		System.out.println("");
		
		for(int i=0;i<ciphertext.length();i++){
			for(int j=0;j<key;j++){
				if(mat[j][i]!= '_'){
					plaintext = plaintext+mat[j][i];
				}
			}
		}
		
		System.out.println("Plaintext: "+ plaintext);
	}
	
	public static void main (String []args){
		RailFenceCipher obj = new RailFenceCipher();
		Scanner scn = new Scanner (System.in);
		String msg ="";
		int key=0;
		
		System.out.println("Please choose an option: ");
		System.out.println("1. Encryption");
		System.out.println("2. Decryption ");
		
		int opt = scn.nextInt();
		if (opt ==1){
			System.out.println("Please enter plaintext: ");
			msg = scn.next();
			System.out.println("Please enter the key: ");
			key = scn.nextInt();
			obj.encrypt(msg,key);
		}else if (opt == 2){
			System.out.println("Please enter ciphertext: ");
			msg = scn.next();
			System.out.println("Please enter the key: ");
			key = scn.nextInt();
			obj.decrypt(msg,key);
		}else{
			System.out.println("Inavlid Option");
		}
	}
}

====================================================================================================
//RSA

import java.math.*;
import java.util.*;

public class RSA{
	
	static double gcdCal(double x,double y){
		
		double a=0;
		double b=0;
		double r=0;
		
		if(x>y){
			a=x;
			b=y;
		}else{
			a=y;
			b=x;
		}
		
		while(b!=0){
			r=a%b;
			a=b;
			b=r;
		}
		
		
		
		return a;
	}
	
	static double[] keyGen(double p,double q){
		double n = p*q;
		double pn = (p-1)*(q-1);
		double e =2;
		double d=0;
		
		while(e<pn){
			if(gcdCal(e,pn)==1){
				break;
			}
			
			e++;
		}
		
		for(int i=0;i<=100;i++)
		{
			double x=1+(i*pn);
			if(x%e==0)      
			{
				d=x/e;
				break;
			}
		}
		System.out.println("d: "+d);
		System.out.println("n: "+n);
		
		double result[]={n,e,d};
		
		return result;
		
	}
	
	static void encrypt(double publicKey[],double plaintext){
		
		double n = publicKey[1];
		double e = publicKey[0];
		
		double y = Math.pow(plaintext,e);
		double s = y%n;
		
		System.out.println("Ciphertext value: "+s);
	}
	
	static void decrypt(double privateKey[],double ciphertext){
		
		double n = privateKey[1];
		double d = privateKey[0];
		
		double x = Math.pow(ciphertext,d);
		double ss =  x%n;
		
		System.out.println("Plaintext value: "+ss);
	}
	
	public static void main (String []args){

		System.out.println("RSA");
		double p=11;
		double q=13;
		double output[] = keyGen(p,q);
		
		System.out.println("n = "+output[0]);
		System.out.println("e = "+output[1]);
		System.out.println("d = "+output[2]);
		
		double pubKey [] = {output[1],output[0]};
		double pvtKey [] = {output[2],output[0]};
		
		encrypt(pubKey,3);
		decrypt(pvtKey,42);
		
		
		
	}
}

====================================================================================================
